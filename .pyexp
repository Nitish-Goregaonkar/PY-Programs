# Using curly braces 
empty_dict = {} 
print("Empty Dictionary:", empty_dict) 
# Using the dict() function 
empty_dict_2 = dict() 
print("Empty Dictionary using dict():", empty_dict_2) 
# Creating a dictionary with initial values 
student_marks = {'Alice': 85, 'Bob': 90, 'Charlie': 78} 
print("Dictionary with Initial Values:", student_marks)

# Using the dict() constructor 
student_marks = dict(Alice=85, Bob=90, Charlie=78) 
print("Dictionary with dict() Constructor:", student_marks)


# Using fromkeys() to create dictionary with default value 
keys = ['Alice', 'Bob', 'Charlie'] 
student_dict = dict.fromkeys(keys, 0) 
print("Dictionary with fromkeys():", student_dict)

student_marks = {'Alice': 85, 'Bob': 90, 'Charlie': 78} 
print("Student Marks:", student_marks)

# Print each key-value pair 
for student, marks in student_marks.items(): 
    print(f"{student}: {marks}")


    # Print only keys 
print("Keys:", student_marks.keys()) 
# Print only values 
print("Values:", student_marks.values()) 
from pprint import pprint 
# Pretty-print the dictionary 
pprint(student_marks)

# Sample dictionary 
student = { 
'name': 'Alice', 
'age': 25, 
'grades': {'Math': 90, 'Science': 85} 
} 
# Accessing values 
print("Name:", student['name']) 
print("Age:", student['age']) 
# Using get() to access values 
print("Name:", student.get('name')) 
print("Country:", student.get('country')) 
# Accessing a nested dictionary value 
math_grade = student['grades']['Math'] 
print("Math Grade:", math_grade) 
# Accessing keys, values, and items 
print("Keys:", student.keys()) 
print("Values:", student.values()) 
print("Items:", student.items())
for key, value in student.items(): 
print(f"{key}: {value}")