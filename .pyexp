# Using curly braces 
empty_dict = {} 
print("Empty Dictionary:", empty_dict) 
# Using the dict() function 
empty_dict_2 = dict() 
print("Empty Dictionary using dict():", empty_dict_2) 
# Creating a dictionary with initial values 
student_marks = {'Alice': 85, 'Bob': 90, 'Charlie': 78} 
print("Dictionary with Initial Values:", student_marks)

# Using the dict() constructor 
student_marks = dict(Alice=85, Bob=90, Charlie=78) 
print("Dictionary with dict() Constructor:", student_marks)


# Using fromkeys() to create dictionary with default value 
keys = ['Alice', 'Bob', 'Charlie'] 
student_dict = dict.fromkeys(keys, 0) 
print("Dictionary with fromkeys():", student_dict)

student_marks = {'Alice': 85, 'Bob': 90, 'Charlie': 78} 
print("Student Marks:", student_marks)

# Print each key-value pair 
for student, marks in student_marks.items(): 
    print(f"{student}: {marks}")


    # Print only keys 
print("Keys:", student_marks.keys()) 
# Print only values 
print("Values:", student_marks.values()) 
from pprint import pprint 
# Pretty-print the dictionary 
pprint(student_marks)

# Sample dictionary 
student = { 
'name': 'Alice', 
'age': 25, 
'grades': {'Math': 90, 'Science': 85} 
} 
# Accessing values 
print("Name:", student['name']) 
print("Age:", student['age']) 
# Using get() to access values 
print("Name:", student.get('name')) 
print("Country:", student.get('country')) 
# Accessing a nested dictionary value 
math_grade = student['grades']['Math'] 
print("Math Grade:", math_grade) 
# Accessing keys, values, and items 
print("Keys:", student.keys()) 
print("Values:", student.values()) 
print("Items:", student.items())
for key, value in student.items(): 
    print(f"{key}: {value}")

# Sample dictionary 
student_marks = {'Alice': 85, 'Bob': 90} 
# Adding a new item 
student_marks['Charlie'] = 78 
print("Dictionary after adding Charlie:", student_marks)
# Adding multiple items using a dictionary 
student_marks.update({'David': 92, 'Eve': 88}) 
print("Dictionary after adding multiple items:", student_marks) 
 
# Alternatively, using a list of tuples 
student_marks.update([('Frank', 76), ('Grace', 81)]) 
print("Dictionary after adding more items:", student_marks)
# New items to add 
new_students = {'Henry': 84, 'Ivy': 79} 
# Merging dictionaries with unpacking 
student_marks = {**student_marks, **new_students} 
print("Dictionary after merging with new students:", student_marks)

# Sample dictionary 
student_marks = {'Alice': 85, 'Bob': 90} 
 
# Updating an existing key and adding a new one 
student_marks['Alice'] = 88 # Update existing key 
student_marks['Charlie'] = 78 # Add new key 
print("Updated Dictionary:", student_marks)

# Updating multiple items with update() 
student_marks.update({'Bob': 92, 'David': 85}) 
print("Dictionary after update:", student_marks) 
# Another dictionary 
new_students = {'Eve': 81, 'Frank': 75} 
 
# Merging two dictionaries 
student_marks.update(new_students) 
print("Dictionary after merging:", student_marks)

# Sample dictionary 
student_marks = {'Alice': 85, 'Bob': 90, 'Charlie': 78} 
# Deleting a specific item 
del student_marks['Alice']
print("Dictionary after deleting Alice:", student_marks)


# Deleting a specific item using pop() 
removed_value = student_marks.pop('Bob', 'Key not found') 
print("Removed value:", removed_value) 
print("Dictionary after popping Bob:", student_marks)

# Sample dictionary 
student_marks = {'Alice': 85, 'Bob': 90, 'Charlie': 78} 
# Deleting the last item 
last_item = student_marks.popitem() 
print("Last item removed:", last_item) 
print("Dictionary after popitem:", student_marks)

# Clearing all items 
student_marks.clear() 
print("Dictionary after clear:", student_marks)
# Deleting the dictionary 
del student_marks 
# print(student_marks) # This would raise a NameError
student_list = [('Alice', 90), ('Bob', 76), ('Charlie', 88)] 
student_dict = dict(student_list) 
print("Converted Dictionary:", student_dict) 
keys = ['Alice', 'Bob', 'Charlie'] 
values = [90, 76, 88] 
 
student_dict = dict(zip(keys, values)) 
print("Converted Dictionary:", student_dict) 


# Sample nested dictionary 
students = { 
'Alice': {'Math': 85, 'Science': 90}, 
'Bob': {'Math': 78, 'Science': 88} 
} 
# Adding a new subject for Alice 
students['Alice']['English'] = 92 
 
# Adding a new student with their subjects 
students['Charlie'] = {'Math': 82, 'Science': 87, 'English': 91} 
 
print("Nested Dictionary after adding items:") 
print(students)


# Removing a subject from Bob 
del students['Bob']['Science'] 
 
# Removing a student entirely 
removed_student = students.pop('Charlie') 
 
print("Nested Dictionary after removing items:") 
print(students) 
print("Removed student:", removed_student) 